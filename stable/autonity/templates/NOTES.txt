==== Autonity ====

# To get autonity autonity-node-0 account password type:
    kubectl -n {{ .Release.Namespace }} get secrets autonity-node-0 -o 'go-template={{ "{{" }}index .data "password"{{ "}}" }}' | base64 --decode; echo ""

# Get private key of autonity-node-0
    kubectl -n {{ .Release.Namespace }} get secrets autonity-node-0 -o 'go-template={{ "{{" }}index .data "private_key"{{ "}}" }}' | base64 --decode; echo ""

# Get address for autonity-node-0
    kubectl -n {{ .Release.Namespace }} get configmap autonity-node-0 -o jsonpath='{.data.address}'

# Get genesis.json
    kubectl -n {{ .Release.Namespace }} get configmaps genesis -o jsonpath='{.data.genesis}'

# Export genesis.yaml
# sudo snap install jq yq
    kubectl -n {{ .Release.Namespace }} get configmaps genesis -o jsonpath='{.data.genesis}' |jq '{genesis: .}' |yq r -

# Forward rpcapi autonity-node-0 to localhost
    kubectl -n {{ .Release.Namespace }} port-forward svc/autonity-node-0 8545:8545
# Forward wsapi autonity-node-0 to localhost
    kubectl -n {{ .Release.Namespace }} port-forward svc/autonity-node-0 8546:8546

### Get enode:
# It can take a time to wait until Public IP will allocated
{{ if .Values.aws }}
    IP={{ .Values.aws.autonity_node_0.ext_ip }}; \
{{ else }}
    IP=$(kubectl -n {{ .Release.Namespace }} get svc p2p-autonity-node-0 -o jsonpath="{.status.loadBalancer.ingress[*].ip}"); \
{{ end }}    PUB_KEY=$(kubectl -n {{ .Release.Namespace }} get configmap autonity-node-0 -o jsonpath="{.data.pub_key}"); \
    PORT=$(kubectl -n {{ .Release.Namespace }} get svc p2p-autonity-node-0 -o jsonpath="{.spec.ports[0].port}"); \
    echo "enode://"${PUB_KEY}\@${IP}\:${PORT}

###

### HTTP(s)-RPC ###
# Get last block number
    curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' http://localhost:8545

# Get Autonity Contract Address
    curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"tendermint_getContractAddress","params":[],"id":1}' http://localhost:8545

# Example JSON-RPC requests:
{{ if .Values.rpc_http_basic_auth_enabled }}RPC_AUTONITY_AUTH=user:password  {{ end }}
{{ if .Values.rpc_https_enabled }}
## Download tls.crt from k8s secret if you are using self-signed certificate
kubectl -n {{ .Release.Namespace }} get secrets autonity-https -o 'go-template={{ "{{" }}index .data "tls.crt"{{ "}}" }}' | base64 --decode; echo ""
CAfile=./files/tls.crt
HOST=host.domain.example
# echo "127.0.0.1       "${HOST} >> /etc/hosts
{{ end }}

### HTTP(s)-RPC ###
curl -X POST -H "Content-Type: application/json" \
   {{ if .Values.rpc_http_basic_auth_enabled }} -u $RPC_AUTONITY_AUTH {{ end }} \
   {{ if .Values.rpc_https_enabled }} --cacert $CAfile {{ end }} \
    --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
   {{ if .Values.rpc_https_enabled }} https://$HOST:8545 {{ else }} http://localhost:8545 {{ end }}

### WS(s)-RPC ###
docker run -it --rm --net=host \
    {{ if .Values.rpc_https_enabled }} -v $(pwd)"/files/tls.crt":"/tls.crt" {{ end }}\
     monotykamary/wscat \
    {{ if .Values.rpc_http_basic_auth_enabled }} --auth $RPC_AUTONITY_AUTH {{ end }}\
    {{ if .Values.rpc_https_enabled }} --ca /tls.crt {{ end }}\
     -c {{ if .Values.rpc_https_enabled }}wss://$HOST:8546 {{ else }}ws://127.0.0.1:8546 {{end}}\
     -x '{"method":"eth_blockNumber","params":[],"id":1}'
